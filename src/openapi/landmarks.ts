/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/landmarks": {
    /** GetLandmarks 登録地点の一覧を返します. */
    get: operations["GetLandmarks"];
    /** PostLandmarks 新しい地点を登録します. */
    post: operations["PostLandmarks"];
  };
  "/landmarks/{id}": {
    /** GetLandmarksID 指定された地点データを取得します. */
    get: operations["GetLandmarksID"];
    /** PutLandmarksID 指定地点更新 指定された地点データを更新します. */
    put: operations["PutLandmarksID"];
    /** DeleteLandmarksID 指定された地点データを削除します. */
    delete: operations["DeleteLandmarksID"];
    parameters: {
      path: {
        /**
         * @description ランドマーク識別番号
         * @example 1
         */
        id: number;
      };
    };
  };
  "/landmarks/_search": {
    /** PostLandmarksSearch 検索条件を指定して検索します. */
    post: operations["PostLandmarksSearch"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description 地点情報 */
    Landmark: {
      /**
       * @description 地点識別番号
       * @example 1
       */
      id?: number;
      /**
       * @description 地点名称
       * @example 東京タワー
       */
      name: string;
      /**
       * @description 地点概要
       * @example 東京都港区芝公園にある総合電波塔で、正式名称は日本電波塔である。
       */
      description: string;
      /**
       * Format: double
       * @description 緯度[deg]
       * @example 35.6586193045004
       */
      latitude: number;
      /**
       * Format: double
       * @description 経度[deg]
       * @example 139.7454050822132
       */
      longitude: number;
      /**
       * Format: float
       * @description 高度[m]
       * @example 333
       */
      altitude: number;
    };
    /**
     * @description 地点情報一覧
     * @example {
     *   "total": 4,
     *   "count": 2,
     *   "items": [
     *     {
     *       "id": 1,
     *       "name": "東京タワー",
     *       "description": "東京都港区芝公園にある総合電波塔で、正式名称は日本電波塔である。",
     *       "latitude": 35.6586193045004,
     *       "longitude": 139.7454050822132,
     *       "altitude": 333
     *     },
     *     {
     *       "id": 2,
     *       "name": "東京タワー",
     *       "description": "東京都庁舎は、東京都新宿区西新宿に所在する東京都庁の庁舎である。",
     *       "latitude": 35.689489150649095,
     *       "longitude": 139.69168760538773,
     *       "altitude": 243
     *     }
     *   ]
     * }
     */
    Landmarks: {
      /** @description データ総数 */
      total: number;
      /** @description データ数 */
      count: number;
      /** @description データ一覧 */
      items: components["schemas"]["Landmark"][];
    };
    /** @description 地点情報一覧 */
    LocationSearchQuery: {
      /** @description ソート情報 */
      sort?: components["schemas"]["SortField"];
      /** @description データ数 */
      filter?: components["schemas"]["FilterField"];
      /** @description ページ番号 */
      page: number;
      /** @description 取得データ数 */
      perPage: number;
    };
    /** @description ソート情報 */
    SortField: {
      field: string;
      /**
       * @description ソート方向
       * @enum {string}
       */
      type: "asc" | "desc";
    };
    /** @description フィルタ情報 */
    FilterField: {
      field: string;
      value: string;
      /**
       * @description 検索方法
       * @enum {string}
       */
      type: "extract" | "partial" | "prefix" | "suffix";
    };
  };
  responses: {
    /** @description 成功時レスポンス */
    Success: {
      content: {
        "application/json": {
          /**
           * @description リクエスト識別子
           * @example O5g0Av2vOx9Hz7tZ
           */
          requestId: string;
          /**
           * @description メッセージ識別子.言語ファイルのキーと同様
           * @example OperationId.404.1.1
           */
          messageId: string;
          /** @description メッセージ引数 */
          arguments: {
              [key: string]: unknown;
            }[];
        };
      };
    };
    /** @description リソース生成時レスポンス */
    Created: {
      content: {
        "application/json": {
          /**
           * @description リクエスト識別子
           * @example O5g0Av2vOx9Hz7tZ
           */
          requestId: string;
          /**
           * @description メッセージ識別子.言語ファイルのキーと同様
           * @example OperationId.404.1.1
           */
          messageId: string;
          /**
           * @description 作成した識別子.IDが数値だった時も文字列として渡される.
           * @example 1
           */
          createdId: string;
        };
      };
    };
    /** @description リソース削除時レスポンス */
    Deleted: {
      content: {
        "application/json": {
          /**
           * @description リクエスト識別子
           * @example O5g0Av2vOx9Hz7tZ
           */
          requestId: string;
          /**
           * @description メッセージ識別子.言語ファイルのキーと同様
           * @example OperationId.404.1.1
           */
          messageId: string;
          /**
           * @description 削除した識別番号.IDが数値だった時も文字列として渡される.
           * @example 1
           */
          deletedId: string;
        };
      };
    };
    /** @description リソース更新時レスポンス */
    Updated: {
      content: {
        "application/json": {
          /**
           * @description リクエスト識別子
           * @example O5g0Av2vOx9Hz7tZ
           */
          requestId: string;
          /**
           * @description メッセージ識別子.言語ファイルのキーと同様
           * @example OperationId.404.1.1
           */
          messageId: string;
          /**
           * @description 更新した識別番号.IDが数値だった時も文字列として渡される.
           * @example 1
           */
          updatedId: string;
        };
      };
    };
    /** @description リクエストやクエリパラメータの値が異常値だった時のレスポンス */
    BadRequest: {
      content: {
        "application/json": {
          /**
           * @description リクエスト識別子
           * @example 5WxDuEsDWm1z0eCv
           */
          requestId: string;
          /**
           * @description メッセージ識別子.言語ファイルのキーと同様
           * @example OperationId.404.1.1
           */
          messageId: string;
          /** @description メッセージ引数 */
          arguments: {
            [key: string]: unknown;
          };
        };
      };
    };
    /** @description 指定されたリソースが発見できない時のレスポンス */
    NotFound: {
      content: {
        "application/json": {
          /**
           * @description リクエスト識別子
           * @example O5g0Av2vOx9Hz7tZ
           */
          requestId: string;
          /**
           * @description メッセージ識別子.言語ファイルのキーと同様
           * @example OperationId.404.1.1
           */
          messageId: string;
          /** @description メッセージ引数 */
          arguments: {
            [key: string]: unknown;
          };
          /**
           * @description 見つからなかった識別子.IDが数値だった時も文字列として渡される.
           * @example 1
           */
          notFoundId: string;
        };
      };
    };
    /** @description API内部処理で異常が発生した時のレスポンス */
    InternalServerError: {
      content: {
        "application/json": {
          /**
           * @description リクエスト識別子
           * @example O5g0Av2vOx9Hz7tZ
           */
          requestId: string;
          /**
           * @description メッセージ識別子.言語ファイルのキーと同様
           * @example OperationId.404.1.1
           */
          messageId: string;
          /** @description メッセージ引数 */
          arguments: {
            [key: string]: unknown;
          };
        };
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** GetLandmarks 登録地点の一覧を返します. */
  GetLandmarks: {
    parameters: {
      query: {
        /**
         * @description ページ番号
         * @example 1
         */
        page: number;
        /**
         * @description ページあたりのデータ数
         * @example 2
         */
        perPage: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Landmarks"];
        };
      };
      400: components["responses"]["BadRequest"];
      404: components["responses"]["NotFound"];
      500: components["responses"]["InternalServerError"];
    };
  };
  /** PostLandmarks 新しい地点を登録します. */
  PostLandmarks: {
    /** @description 登録する地点情報 */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Landmark"];
      };
    };
    responses: {
      200: components["responses"]["Created"];
      400: components["responses"]["BadRequest"];
      404: components["responses"]["NotFound"];
      500: components["responses"]["InternalServerError"];
    };
  };
  /** GetLandmarksID 指定された地点データを取得します. */
  GetLandmarksID: {
    parameters: {
      path: {
        /**
         * @description ランドマーク識別番号
         * @example 1
         */
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Landmark"];
        };
      };
      404: components["responses"]["NotFound"];
      500: components["responses"]["InternalServerError"];
    };
  };
  /** PutLandmarksID 指定地点更新 指定された地点データを更新します. */
  PutLandmarksID: {
    parameters: {
      path: {
        /**
         * @description ランドマーク識別番号
         * @example 1
         */
        id: number;
      };
    };
    /** @description 更新する地点情報 */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Landmark"];
      };
    };
    responses: {
      200: components["responses"]["Updated"];
      400: components["responses"]["BadRequest"];
      404: components["responses"]["NotFound"];
      500: components["responses"]["InternalServerError"];
    };
  };
  /** DeleteLandmarksID 指定された地点データを削除します. */
  DeleteLandmarksID: {
    parameters: {
      path: {
        /**
         * @description ランドマーク識別番号
         * @example 1
         */
        id: number;
      };
    };
    responses: {
      200: components["responses"]["Deleted"];
      404: components["responses"]["NotFound"];
      500: components["responses"]["InternalServerError"];
    };
  };
  /** PostLandmarksSearch 検索条件を指定して検索します. */
  PostLandmarksSearch: {
    /** @description 登録する地点情報 */
    requestBody: {
      content: {
        "application/json": components["schemas"]["LocationSearchQuery"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Landmarks"];
        };
      };
      400: components["responses"]["BadRequest"];
      500: components["responses"]["InternalServerError"];
    };
  };
}
